//ryleigh romero, Jack Bagnulo, Brayton Arthur, and Alexandra Cornell

//libraries
#include "Arduino_SensorKit.h"
#include <LiquidCrystal.h>
#include <time.h>


#define RDA 0x80
#define TBE 0x20  

volatile unsigned char *hdd = (unsigned char*) 0x101;
volatile unsigned char *gdd = (unsigned char*) 0x33;
volatile unsigned char *edd = (unsigned char*) 0x2D;
volatile unsigned char *fdd = (unsigned char*) 0x30; //might delete
volatile unsigned char *porth = (unsigned char*) 0x102;
volatile unsigned char *portg = (unsigned char*) 0x34;
volatile unsigned char *porte = (unsigned char*) 0x2E;
volatile unsigned char *portf = (unsigned char*) 0x31; //might delete

volatile unsigned char *myUCSR0A = (unsigned char *)0x00C0;
volatile unsigned char *myUCSR0B = (unsigned char *)0x00C1;
volatile unsigned char *myUCSR0C = (unsigned char *)0x00C2;
volatile unsigned int  *myUBRR0  = (unsigned int *) 0x00C4;
volatile unsigned char *myUDR0   = (unsigned char *)0x00C6;

volatile unsigned char* my_ADMUX = (unsigned char*) 0x7C;
volatile unsigned char* my_ADCSRB = (unsigned char*) 0x7B;
volatile unsigned char* my_ADCSRA = (unsigned char*) 0x7A;
volatile unsigned int* my_ADC_DATA = (unsigned int*) 0x78;

volatile unsigned char *myTCCR1A = (unsigned char *) 0x80;
volatile unsigned char *myTCCR1B = (unsigned char *) 0x81;
volatile unsigned char *myTCCR1C = (unsigned char *) 0x82;
volatile unsigned char *myTIMSK1 = (unsigned char *) 0x6F;
volatile unsigned int  *myTCNT1  = (unsigned  int *) 0x84;
volatile unsigned char *myTIFR1 =  (unsigned char *) 0x36;
volatile unsigned char *portDDRB = (unsigned char *) 0x24;
volatile unsigned char *portB =    (unsigned char *) 0x25;

unsigned char* my_EIMSK = (unsigned char*) 0x3D;
unsigned char* my_EICRB = (unsigned char*) 0x6A;

Stepper stepper(STEPS, 39, 43, 41, 45);
int Pval = 0;
int potVal = 0;
bool on = 0;  //for button
char mode = 0; //for case switch
int val = 0; //for water sensor 
  //int humid = Environment.readHumidity(A2);
const int RS = 23, EN = 25, D4 = 33, D5 = 31, D6 = 33, D7 = 27; //for lcd
LiquidCrystal lcd(RS, EN, D4, D5, D6, D7); //lcd

void setup() {
  //button interupt
  //button is on D2
  cli();
 *my_EICRB |= 0x02;
 *my_EIMSK |= 0x10;
 sei();
  *edd = *edd & 0xEF;
  *porte = *porte | 0x10; 



  // setup the UART
  U0init(9600);
  //water sensor lab
   adc_init();

  //lcd lab
   lcd.begin(16, 2); // set up number of columns and rows

  //temp and humidity sensor begin
  Environment.begin();
  Environment.setPin(A2);

*hdd = *hdd |0x18;
*gdd = *gdd |0x20;
*edd = *edd |0x38;

}
void loop() { 
potVal = map(analogRead(A0),0,1024,0,500);
if (potVal>Pval)
  stepper.step(5);
if (potVal<Pval)
  stepper.step(-5);
Pval = potVal;
//add case statement for idle, running, etc. 
  switch (mode) {
    case 0:
    disabled();
    break;

    case 1: //running
    //if temp is above threshold run running and then switch to idle when it gets below threshold
    running();
    break;

    case 2: //idle
    //exact time stamp using real time clock
    //monitor water level and switch to error if too low
    idle(); 
    break;

    case 3: //error
      lcd.clear();
      lcd.setCursor(0,1);
      lcd.print('waterlvltoolow');
    break;

    default:
    
    break;
  }
 

}

void disabled(){
//1 is output
//0 is input
//motor is ph3
//yellow light is PG5
  *porth = *porth & 0xF7; // turn off fan 
  *portg = *portg | 0x20; //turn on yellow light
  while (on==0) {
  }
  mode = 2;
  *portg = *portg & !0x20; //turn off yellow light
}
void idle (){
//green light is PE3 
// motor ph3 
  *porth = *porth & 0xF7; //turn off fan
  *porte = *porte | 0x08; //turn on green light 
  char i = 0;
  //lcd.print(Eviroment.readTemperature);
  while (mode==2){
  unsigned int waterlvl = adc_read(0);
  unsigned int temp = Environment.readTemperature(2);
    if (waterlvl<100){
      mode = 3;
    }
    else if ( temp >22) {
      mode = 1;
    }
    else if (on==0){
    mode = 0;
    }

  // stop the timer
  *myTCCR1B &= 0xF8; //sets prescaler to 000
  // set the counts
  *myTCNT1 = (unsigned int)(65536 - 156);
  * myTCCR1A = 0x0;
  // start the timer
  * myTCCR1B |= (1 << CS12);
  // wait for overflow
  while((*myTIFR1 & 0x01)==0);
  // stop the timer
  *myTCCR1B &= ~(0x07);  
  // reset TOV           
  *myTIFR1 |= 0x01;
  i+=1;
  if (i==6000){
    lcd.clear();
    lcd.setCursor(0, 1);
    lcd.print('temp = '); //ask for help fixing this
    //put lcd for real time stuff here 
    i=0;
  }
  }
  *porte = *porte & !0x08;
}

void running () {
*porth = *porth | 0x08; //turn on blue light and fan
unsigned int waterlvl = adc_read(0); //for water sensor
unsigned int temp = Environment.readTemperature(2); 
  while (mode==1) {
    if (waterlvl<100){
      mode=3;
    }
    else if (temp<22) {
      mode = 2;
    }
    else if (on==0) {
      mode = 0;
    }

  }
}

void error () {
  *porth = *porth & 0xF7; // turn off fan 
  *porte = *porte | 0x40; //turns on red light
while (mode==3) {
  lcd.clear();
  lcd.setCursor(0,1);
  lcd.write ('Water is too low');
  if (on==1){
    mode = 2;
  }
}
*porte = *porte & !0x40;  //turns off red light
}

 ISR (INT4_vect){
    on = !on;
  }


//from water sensor lab
void adc_init()
{
  // setup the A register
  *my_ADCSRA |= 0b10000000; // set bit   7 to 1 to enable the ADC
  *my_ADCSRA &= 0b11011111; // clear bit 6 to 0 to disable the ADC trigger mode
  *my_ADCSRA &= 0b11110111; // clear bit 5 to 0 to disable the ADC interrupt
  *my_ADCSRA &= 0b11111000; // clear bit 0-2 to 0 to set prescaler selection to slow reading
  // setup the B register
  *my_ADCSRB &= 0b11110111; // clear bit 3 to 0 to reset the channel and gain bits
  *my_ADCSRB &= 0b11111000; // clear bit 2-0 to 0 to set free running mode
  // setup the MUX Register
  *my_ADMUX  &= 0b01111111; // clear bit 7 to 0 for AVCC analog reference
  *my_ADMUX  |= 0b01000000; // set bit   6 to 1 for AVCC analog reference
  *my_ADMUX  &= 0b11011111; // clear bit 5 to 0 for right adjust result
  *my_ADMUX  &= 0b11100000; // clear bit 4-0 to 0 to reset the channel and gain bits
}

//also from water sensor lab 
unsigned int adc_read(unsigned char adc_channel_num)
{
  // clear the channel selection bits (MUX 4:0)
  *my_ADMUX  &= 0b11100000;
  // clear the channel selection bits (MUX 5)
  *my_ADCSRB &= 0b11110111;
  // set the channel number
  if(adc_channel_num > 7)
  {
    // set the channel selection bits, but remove the most significant bit (bit 3)
    adc_channel_num -= 8;
    // set MUX bit 5
    *my_ADCSRB |= 0b00001000;
  }
  // set the channel selection bits
  *my_ADMUX  += adc_channel_num;
  // set bit 6 of ADCSRA to 1 to start a conversion
  *my_ADCSRA |= 0x40;
  // wait for the conversion to complete
  while((*my_ADCSRA & 0x40) != 0);
  // return the result in the ADC data register
  return *my_ADC_DATA;
}

//stuff to read and write
void U0init(int U0baud)
{
 unsigned long FCPU = 16000000;
 unsigned int tbaud;
 tbaud = (FCPU / 16 / U0baud - 1);
 // Same as (FCPU / (16 * U0baud)) - 1;
 *myUCSR0A = 0x20;
 *myUCSR0B = 0x18;
 *myUCSR0C = 0x06;
 *myUBRR0  = tbaud;
}
unsigned char U0kbhit()
{
  return *myUCSR0A & RDA;
}
unsigned char U0getchar()
{
  return *myUDR0;
}
void U0putchar(unsigned char U0pdata)
{
  while((*myUCSR0A & TBE)==0);
  *myUDR0 = U0pdata;
}
